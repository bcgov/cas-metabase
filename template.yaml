---
# Source: cas-metabase/templates/networkPolicy/intra-release-by-instance.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: cas-metabase-internal-by-instance
  labels: 
    helm.sh/chart: cas-metabase-0.2.16
    app.kubernetes.io/name: cas-metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "0.43.2"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: cas-metabase
  ingress:
    - from:
        - podSelector:
            matchLabels:
              release: cas-metabase
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: cas-metabase
---
# Source: cas-metabase/templates/networkPolicy/intra-release-by-release.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: cas-metabase-internal-by-release
  labels: 
    helm.sh/chart: cas-metabase-0.2.16
    app.kubernetes.io/name: cas-metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "0.43.2"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      release: cas-metabase
  ingress:
    - from:
        - podSelector:
            matchLabels:
              release: cas-metabase
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: cas-metabase
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/poddisruptionbudget-patroni.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: cas-metabase-patroni-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: cas-metabase-patroni
      release: cas-metabase
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/serviceaccount-patroni.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cas-metabase-patroni
  labels:
    app: cas-metabase-patroni
    chart: patroni-0.21.3
    release: cas-metabase
    heritage: Helm
---
# Source: cas-metabase/charts/metabase/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cas-metabase-config
  namespace: c53ff1-tools
  labels: 
    helm.sh/chart: metabase-0.12.1
    app.kubernetes.io/name: metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "v0.36.3"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: cas-metabase/charts/metabase/templates/nginx/nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cas-metabase-nginx-config
  labels: 
    helm.sh/chart: metabase-0.12.1
    app.kubernetes.io/name: metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "v0.36.3"
    app.kubernetes.io/managed-by: Helm
data:
  default.conf: |
    server {
      listen 3001 ssl;
      listen [::]:3001 ssl;
      ssl_certificate     /home/.acme.sh/cas-metabase-dev.apps.silver.devops.gov.bc.ca/cas-metabase-dev.apps.silver.devops.gov.bc.ca.cer;
      ssl_certificate_key /home/.acme.sh/cas-metabase-dev.apps.silver.devops.gov.bc.ca/cas-metabase-dev.apps.silver.devops.gov.bc.ca.key;
      server_name  _;      
      location / {
        proxy_pass http://localhost:3000;
      }

      location ^~ /.well-known/acme-challenge/ {
        root /home/;
      }
    }
---
# Source: cas-metabase/charts/metabase/templates/nginx/pvc-acme-challenge.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cas-metabase-acme-challenge
  labels: 
    helm.sh/chart: metabase-0.12.1
    app.kubernetes.io/name: metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "v0.36.3"
    app.kubernetes.io/managed-by: Helm

spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 25Mi
  storageClassName: netapp-file-standard
---
# Source: cas-metabase/charts/metabase/templates/nginx/pvc-acme-home.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cas-metabase-acme-home
  labels: 
    helm.sh/chart: metabase-0.12.1
    app.kubernetes.io/name: metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "v0.36.3"
    app.kubernetes.io/managed-by: Helm

spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Mi
  storageClassName: netapp-file-standard
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/role-patroni.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cas-metabase-patroni
  labels:
    app: cas-metabase-patroni
    chart: patroni-0.21.3
    release: cas-metabase
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  # delete is required only for 'patronictl remove'
  - delete
- apiGroups: [""]
  resources: ["services"]
  verbs:
  - create
- apiGroups: [""]
  resources: ["endpoints"]
  verbs:
  - create
  - get
  - patch
  - update
  # the following three privileges are necessary only when using endpoints
  - list
  - watch
  # delete is required only for for 'patronictl remove'
  - delete
  - deletecollection
- apiGroups: [""]
  resources: ["pods"]
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/rolebinding-patroni.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cas-metabase-patroni
  labels:
    app: cas-metabase-patroni
    chart: patroni-0.21.3
    release: cas-metabase
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: cas-metabase-patroni
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cas-metabase-patroni
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/svc-patroni.yaml
apiVersion: v1
kind: Service
metadata:
  name: cas-metabase-patroni
  labels:
    app: cas-metabase-patroni
    chart: patroni-0.21.3
    release: cas-metabase
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP
  selector:
    app: cas-metabase-patroni
    release: cas-metabase
    spilo-role: master
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/svc-patroni.yaml
apiVersion: v1
kind: Service
metadata:
  name: cas-metabase-patroni-readonly
  labels:
    app: cas-metabase-patroni
    chart: patroni-0.21.3
    release: cas-metabase
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP
  selector:
    app: cas-metabase-patroni
    release: cas-metabase
    spilo-role: replica
---
# Source: cas-metabase/charts/metabase/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cas-metabase
  namespace: c53ff1-tools
  labels: 
    helm.sh/chart: metabase-0.12.1
    app.kubernetes.io/name: metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "v0.36.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: metabase
  selector: 
    app.kubernetes.io/name: metabase
    app.kubernetes.io/instance: cas-metabase
---
# Source: cas-metabase/charts/metabase/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cas-metabase
  namespace: c53ff1-tools
  labels: 
    helm.sh/chart: metabase-0.12.1
    app.kubernetes.io/name: metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "v0.36.3"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: metabase
      app.kubernetes.io/instance: cas-metabase
  replicas: 2
  template:
    metadata:
      annotations:
        checksum/config: bf905a657b4e3af7d7fdf21a6ba7e620dbea5e04fbde858da5f14c1fd60e695e
        checksum/nginxconfig: 258b372eaca2ffd6b7ab067877189e310c1a5e325146211eeae90b0ca87ab458
      labels: 
        helm.sh/chart: metabase-0.12.1
        app.kubernetes.io/name: metabase
        app.kubernetes.io/instance: cas-metabase
        app.kubernetes.io/version: "v0.36.3"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: app
    spec:
      imagePullSecrets:
        - name: dockerhub-registry
      containers:
        - name: metabase-nginx
          image: "gcr.io/ggl-cas-storage/nginx:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3001
          volumeMounts:
            - name: nginx-configs
              mountPath: /etc/nginx/conf.d
            - mountPath: /home/.acme.sh
              name: acme-home
            - mountPath: /home/.well-known/acme-challenge
              name: acme-challenge
        - name: metabase
          image: "gcr.io/ggl-cas-storage/metabase:latest"
          imagePullPolicy: IfNotPresent
          env:
          - name: MB_JETTY_HOST
            value: "0.0.0.0"
          - name: MB_JETTY_PORT
            value: "3000"
          - name: MB_DB_TYPE
            value: postgres
          - name: MB_DB_HOST
            value: "cas-metabase-patroni"
          - name: MB_DB_PORT
            value: "5432"
          - name: MB_DB_DBNAME
            value: "metabase"
          - name: MB_DB_USER
            valueFrom:
              secretKeyRef:
                name: cas-metabase
                key: database-user
          - name: MB_DB_PASS
            valueFrom:
              secretKeyRef:
                name: cas-metabase
                key: database-password
          - name: MB_PASSWORD_COMPLEXITY
            value: normal
          - name: MB_PASSWORD_LENGTH
            value: "6"
          - name: JAVA_TIMEZONE
            value: UTC
          - name: MB_EMOJI_IN_LOGS
            value: "true"
          ports:
            - containerPort: 3000
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 120
            timeoutSeconds: 30
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            limits:
              cpu: 1
              memory: 4Gi
            requests:
              cpu: 250m
              memory: 2Gi
      volumes:
        - name: nginx-configs
          configMap:
            name: cas-metabase-nginx-config
        - name: acme-home
          persistentVolumeClaim:
            claimName: cas-metabase-acme-home
        - name: acme-challenge
          persistentVolumeClaim:
            claimName: cas-metabase-acme-challenge
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/statefulset-patroni.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cas-metabase-patroni
  labels:
    app: cas-metabase-patroni
    chart: patroni-0.21.3
    release: cas-metabase
    heritage: Helm
spec:
  serviceName: cas-metabase-patroni
  replicas: 3
  selector:
    matchLabels:
      app: cas-metabase-patroni
      release: cas-metabase
  template:
    metadata:
      name: cas-metabase-patroni
      labels:
        app: cas-metabase-patroni
        release: cas-metabase
    spec:
      serviceAccountName: cas-metabase-patroni
      terminationGracePeriodSeconds: 3600
      containers:
      - name: patroni
        image: "gcr.io/ggl-cas-storage/cas-postgres:0.3.0"
        imagePullPolicy: Always
        env:
        - name: PGPASSWORD_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: cas-metabase-patroni
              key: password-superuser
        - name: PGPASSWORD_ADMIN
          valueFrom:
            secretKeyRef:
              name: cas-metabase-patroni
              key: password-admin
        - name: PGPASSWORD_STANDBY
          valueFrom:
            secretKeyRef:
              name: cas-metabase-patroni
              key: password-standby
        - name: DCS_ENABLE_KUBERNETES_API
          value: "true"
        - name: KUBERNETES_LABELS
          value: "{ \"app\": \"cas-metabase-patroni\", \"release\": \"cas-metabase\" }"
        - name: KUBERNETES_SCOPE_LABEL
          value: "app"
        - name: KUBERNETES_USE_CONFIGMAPS
          value: "true"
        - name: SCOPE
          value: cas-metabase-patroni
        - name: USE_WALG
          value: "true"
        - name: BACKUP_SCHEDULE
          value: "00 01 * * *"
        - name: BACKUP_NUM_TO_RETAIN
          value: "90"
        - name: WAL_GS_BUCKET
          value: "9212c9-dev-mb-backups"
        - name: WALE_GS_PREFIX
          value: gs://9212c9-dev-mb-backups/wal
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/etc/credentials/credentials.json"
        - name: WALE_BACKUP_THRESHOLD_MEGABYTES
          value: "1024"
        - name: WALE_BACKUP_THRESHOLD_PERCENTAGE
          value: "30"
        - name: PGROOT
          value: "/home/postgres/pgdata/pgroot"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: "ALLOW_NOSSL"
          value: "true"
        - name: "USE_WALG_BACKUP"
          value: "true"
        - name: "USE_WALG_RESTORE"
          value: "true"
        lifecycle:
          preStop:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - |
                  # switch leader pod if the current pod is the leader
                  if curl --fail http://localhost:8008/read-write; then
                    patronictl switchover --force
                  fi
        ports:
        - containerPort: 8008
        - containerPort: 5432
          name: postgresql
        volumeMounts:
        - name: storage-volume
          mountPath: "/home/postgres/pgdata"
          subPath: ""
        - mountPath: /etc/patroni
          name: patroni-config
          readOnly: true
        - name: gcp-9212c9-dev-mb-backups-service-account-key
          mountPath: /etc/credentials
          readOnly: true
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 15m
            memory: 600Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8008
          initialDelaySeconds: 120
          timeoutSeconds: 30
          failureThreshold: 10
          # timeout and failureThreshold match the defaults for
          # https://patroni.readthedocs.io/en/latest/watchdog.html
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app:  patroni
                  release: "cas-metabase"
        
      volumes:
      - name: patroni-config
        secret:
          secretName: cas-metabase-patroni
      - name: gcp-9212c9-dev-mb-backups-service-account-key
        secret:
          secretName: gcp-9212c9-dev-mb-backups-service-account-key
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        annotations:
        labels:
          app: cas-metabase-patroni
          release: cas-metabase
          heritage: Helm
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "5Gi"
        storageClassName: "netapp-block-standard"
---
# Source: cas-metabase/templates/create-user-db.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cas-metabase-create-user-db-1-otoy2
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 10
  template:
    metadata:
      name: cas-metabase-create-user-db
      labels: 
        helm.sh/chart: cas-metabase-0.2.16
        app.kubernetes.io/name: cas-metabase
        app.kubernetes.io/instance: cas-metabase
        app.kubernetes.io/version: "0.43.2"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: cas-metabase-create-user-db
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
          image: gcr.io/ggl-cas-storage/cas-postgres:0.3.0
          env:
            - name: PGDATABASE
              value: postgres
            - name: PGUSER
              value: postgres
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password-superuser
                  name: cas-metabase-patroni
            - name: PGPORT
              value: "5432"
            - name: PGHOST
              value: cas-metabase-patroni
            - name: METABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: cas-metabase
            - name: METABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: cas-metabase
            - name: METABASE_DATABASE
              value: metabase
          command:
                - /usr/bin/env
                - bash
                - -c
                - |
                  set -euo pipefail;
                  create-user-db -d $(METABASE_DATABASE) -u $(METABASE_USER) -p $(METABASE_PASSWORD) --owner;
      restartPolicy: Never
---
# Source: cas-metabase/templates/acme/acme-renewal-cron.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cas-metabase-acme-renewal
  labels: 
    helm.sh/chart: cas-metabase-0.2.16
    app.kubernetes.io/name: cas-metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "0.43.2"
    app.kubernetes.io/managed-by: Helm

spec:
  suspend: true # This cron job is intended to be triggered manually
  schedule: "* * * * *"
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 600
      template:
        metadata:
          labels: 
              helm.sh/chart: cas-metabase-0.2.16
              app.kubernetes.io/name: cas-metabase
              app.kubernetes.io/instance: cas-metabase
              app.kubernetes.io/version: "0.43.2"
              app.kubernetes.io/managed-by: Helm
        spec:
          restartPolicy: Never
          containers:
            - name: cas-metabase-acme-renewal
              image: bitnami/git
              resources:
                limits:
                  cpu: 1000m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 64Mi
              command:
                - /usr/bin/env
                - bash
                - -c
                - |
                  set -euxo pipefail;
                  # renews the certificate if needed
                  /tmp/.acme.sh/acme.sh --cron --home /tmp/.acme.sh --server https://acme-v02.api.letsencrypt.org/directory --days 60;
              volumeMounts:
                - mountPath: /tmp/.acme.sh
                  name: acme-home
                - mountPath: /tmp/.well-known/acme-challenge
                  name: acme-challenge
          volumes:
            - name: acme-home
              persistentVolumeClaim:
                claimName: cas-metabase-acme-home
            - name: acme-challenge
              persistentVolumeClaim:
                claimName: cas-metabase-acme-challenge
          imagePullSecrets:
            - name: dockerhub-registry
---
# Source: cas-metabase/templates/route.yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: cas-metabase
  labels:
    helm.sh/chart: cas-metabase-0.2.16
    app.kubernetes.io/name: cas-metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "0.43.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    haproxy.router.openshift.io/balance: roundrobin

spec:
  host: cas-metabase-dev.apps.silver.devops.gov.bc.ca
  port:
    targetPort: metabase
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: passthrough
  to:
    kind: Service
    name:  cas-metabase
    weight: 100
  wildcardPolicy: None
status:
  ingress:
  - conditions:
    - status: 'True'
      type: Admitted
    host: cas-metabase-dev.apps.silver.devops.gov.bc.ca
    routerName: router
    wildcardPolicy: None
---
# Source: cas-metabase/charts/cas-postgres/charts/patroni/templates/sec-patroni.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cas-metabase-patroni
  labels:
    app: cas-metabase-patroni
    chart: patroni-0.21.3
    release: cas-metabase
    heritage: Helm
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
  password-superuser: "aVVFZ0NGWVk5MTYzUXZVak8zOHhCN0wybm5BTjlGdjU="
  password-admin: "OGlDMXlJWjV0MkpveGZ0ZUVXUEZUWERVYlBWdEVZUUU="
  password-standby: "U1FzT0EweEppa3NNZmk0eHgxVWdvM3FzWDMzUU56anY="
---
# Source: cas-metabase/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cas-metabase
  labels:
    helm.sh/chart: cas-metabase-0.2.16
    app.kubernetes.io/name: cas-metabase
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/version: "0.43.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
  database-user: "bWV0YWJhc2U="
  database-password: "M0loRlRZTUR0ZmdXUmNkRVBFVUkwVjMwU2xOSDhaNVM="
---
# Source: cas-metabase/charts/cas-postgres/templates/cas-shelf-walg-bucket-provider-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cas-metabase-cas-postgres-cas-shelf-walg-bucket-provider
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "0"
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 0
  activeDeadlineSeconds: 1200
  template:
    metadata:
      name: cas-metabase-cas-postgres-cas-shelf-walg-bucket-provider
      labels: 
        helm.sh/chart: cas-postgres-0.8.3
        app.kubernetes.io/name: cas-postgres
        app.kubernetes.io/instance: cas-metabase
        app.kubernetes.io/version: "0.3.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: cas-metabase-cas-postgres-cas-shelf-walg-bucket-provider
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
          image: gcr.io/ggl-cas-storage/cas-shelf-tfe-add-app:0.1
          imagePullPolicy: Always
          env:
            - name: TFC_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: terraform-cloud-workspace
            - name: TFC_WORKSPACE_ID
              valueFrom:
                secretKeyRef:
                  key: workspace_id
                  name: terraform-cloud-workspace
          command: ["bash",  "/script.sh", "9212c9-dev", "mb-backups"]
      restartPolicy: Never
---
# Source: cas-metabase/charts/download-cas-metabase-dags/templates/dag-trigger-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cas-metabase-download-cas-metabase-dags
  labels:
    helm.sh/chart: download-cas-metabase-dags-1.0.8
    app.kubernetes.io/name: download-cas-metabase-dags
    app.kubernetes.io/instance: cas-metabase
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "0"
spec:
  backoffLimit: 0
  activeDeadlineSeconds: 1200
  template:
    metadata:
      name: cas-metabase-download-cas-metabase-dags
      labels:
        helm.sh/chart: download-cas-metabase-dags-1.0.8
        app.kubernetes.io/name: download-cas-metabase-dags
        app.kubernetes.io/instance: cas-metabase
        app.kubernetes.io/managed-by: Helm
    spec:
      activeDeadlineSeconds: 1200
      restartPolicy: Never
      imagePullSecrets: 
        
        
        - name: image-pull-secret-here
      containers:
      - name: cas-metabase-download-cas-metabase-dags
        image: artifacts.developer.gov.bc.ca/google-docker-remote/ggl-cas-storage/cas-airflow-dag-trigger:69f346b134d99e9e5e6d50e16198fd4977fc3264
        resources:
          limits:
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        imagePullPolicy: Always
        env:
          - name: AIRFLOW_ENDPOINT
            value: https://cas-airflow-dev.apps.silver.devops.gov.bc.ca
          - name: AIRFLOW_USERNAME
            value: cas-airflow-admin
          - name: AIRFLOW_PASSWORD
            valueFrom:
              secretKeyRef:
                key: default-user-pass
                name: airflow-default-user-password
          - name: RELEASE_SUFFIX
            value: tools
        command:
          - /usr/bin/env
          - bash
          - -c
          - ./airflow-dag-trigger.sh fetch_and_save_dag_from_github "e30K"
