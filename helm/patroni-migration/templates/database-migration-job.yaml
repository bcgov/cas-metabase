apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "patroni-migration.fullname" . }}-migrate-database-{{ randAlphaNum 5 | lower }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 10
  template:
    metadata:
      name: {{ template "patroni-migration.fullname" . }}-migrate-database
      labels: {{ include "patroni-migration.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Release.Name }}-database-migration
      containers:
        - name: {{ template "patroni-migration.fullname" . }}-migrate-database
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
          image: {{ .Values.migrationJob.image }}:{{ .Values.migrationJob.tag }}
          env:
            - name: SOURCE_PGHOST
              {{- if .Values.from.host }}
              value: {{ .Values.from.host | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.from.hostSecretKey }}
                  name: {{ .Values.from.secretName }}
              {{- end }}
            - name: SOURCE_PGPORT
              {{- if .Values.from.port }}
              value: {{ .Values.from.port | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.from.portSecretKey }}
                  name: {{ .Values.from.secretName }}
              {{- end }}
            - name: SOURCE_PGUSER
              {{- if .Values.from.user }}
              value: {{ .Values.from.user | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.from.userSecretKey }}
                  name: {{ .Values.from.secretName }}
              {{- end }}
            - name: SOURCE_PGPASSWORD
              {{- if .Values.from.password }}
              value: {{ .Values.from.password | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.from.passwordSecretKey }}
                  name: {{ .Values.from.secretName }}
              {{- end }}
            - name: SOURCE_PGDATABASE
              {{- if .Values.from.db }}
              value: {{ .Values.from.db | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.from.dbSecretKey }}
                  name: {{ .Values.from.secretName }}
              {{- end }}
            - name: TARGET_PGHOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: {{ .Values.to.secretName }}
            - name: TARGET_PGPORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: {{ .Values.to.secretName }}
            - name: TARGET_PGUSER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: {{ .Values.to.secretName }}
            - name: TARGET_PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: port
                  name: {{ .Values.to.secretName }}
            - name: TARGET_PGDATABASE
              valueFrom:
                secretKeyRef:
                  key: dbname
                  name: {{ .Values.to.secretName }}

          command:
            - "bin/bash"
            - "-c"
            - |
              set -euo pipefail;

              echo "$SOURCE_PGHOST:$SOURCE_PGPORT:$SOURCE_PGDATABASE:$SOURCE_PGUSER:$SOURCE_PGPASSWORD" >> .source_pgpass
              echo "$TARGET_PGHOST:$TARGET_PGPORT:$TARGET_PGDATABASE:$TARGET_PGUSER:$TARGET_PGPASSWORD" >> .target_pgpass

              chmod 0600 .source_pgpass
              chmod 0600 .target_pgpass

              PGPASSFILE=".source_pgpass" pg_isready
              PGPASSFILE=".target_pgpass" pg_isready
              
              
              # while [! ]
              #   pg_isready -d $SOURCE_PGDATABASE -h $SOURCE_PGHOST -p $SOURCE_PGPORT -u $SOURCE_PGUSER 
              #   pg_isready $TARGET
              # end;

              # # Check whether the migration already happened

              # PGPASSFILE="..." psql -c "select etc etc"


              # pg_dumpall (old db) -g | psql (new db) <
              # pg_dump | psql < 
      restartPolicy: Never
