apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cas-metabase.fullname" . }}
  labels: {{ include "cas-metabase.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{ include "cas-metabase.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels: {{ include "cas-metabase.labels" . | nindent 8 }}
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | trim | indent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
        - name: dockerhub-registry
{{- if index .Values "prod-test-restore" "enable" }}
      initContainers:
        - name: {{ .Chart.Name }}-wait-for-prod-restore
          image: bash
          imagePullPolicy: Always
          command:
            - bash
            - -c
            - |
              set -euo pipefail;

              while true; do
                echo 'Looking for restore flag in /home/postgres...'
                if [ -f /home/postgres/restore_completed ]; then
                  echo 'Restore from prod completed!'
                  exit 0
                fi;
                if [ -f /home/postgres/restore_failed ]; then
                  echo 'Restore from prod failed. See cronjob logs for more details.'
                  exit 1
                fi;
                sleep 2;
              done;
          volumeMounts:
            - mountPath: /home/postgres/
              name: prod-restore-flag
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: MB_JETTY_HOST
            value: {{ .Values.listen.host | quote }}
          - name: MB_JETTY_PORT
            value: {{ .Values.listen.port | quote }}
          - name: MB_DB_TYPE
            value: {{ .Values.database.type | lower }}
          - name: MB_DB_HOST
            value: {{ .Values.database.host | quote }}
          - name: MB_DB_PORT
            value: {{ .Values.database.port | quote }}
          - name: MB_DB_DBNAME
            value: {{ .Values.database.dbname | quote }}
          - name: MB_DB_USER
            valueFrom:
              secretKeyRef:
                name: {{ or .Values.database.existingSecret (printf "%s-database" (include "cas-metabase.fullname" .)) }}
                key: {{ or .Values.database.existingSecretUsernameKey "username" }}
          - name: MB_DB_PASS
            valueFrom:
              secretKeyRef:
                name: {{ or .Values.database.existingSecret (printf "%s-database" (include "cas-metabase.fullname" .)) }}
                key: {{ or .Values.database.existingSecretPasswordKey "password" }}
          {{- if .Values.pluginsDirectory }}
          - name: MB_PLUGINS_DIR
            value: {{ .Values.pluginsDirectory | quote }}
          {{- end }}
          - name: MB_EMOJI_IN_LOGS
            value: {{ .Values.emojiLogging | quote }}
          {{- if .Values.router }}
          - name: MB_SITE_URL
            value: https://{{ .Values.router.host }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
{{- if index .Values "prod-test-restore" "enable" }}
      volumes:
        - name: prod-restore-flag
          persistentVolumeClaim:
            claimName: {{ template "cas-metabase.fullname" . }}-prod-restore-flag
{{- end }}


